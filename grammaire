tiger->	
	expr
expr->	
	string-constant
	integer-constant
	nil
	lvalue
	- expr
	expr binary-operator expr
	lvalue := expr
	id (expr-listopt)
	(expr-seqopt)
	type-id {filed-listopt}
	if expr then expr
	if expr then expr else expr
	while expr do expr
	for id := expr to expr do expr
	break
	let declaration-list in expr-seqopt end
expr-seq->
	expr
	expr-seq ; expr
expr-list:
	expr
	expr-list , expr
field-list->
	id=expr
	field-list , id=expr
lvalue->
	id
	lvalue . id
	lvalue[expr]
declaration-list->
	declaration
	declaration-list declaration
declaration->
	type-declaration
	variable-declaration
	function-declaration
type-declaration->
	type type-id = type
type->
	type-id
	{type-fieldsopt}
	array of type-id
type-fields->
	type-field
	type-fields , type-field
type-field->
	id:type-id
variable-declaration->
	var id := expr
	var id : type-id := expr
function-declaration-> 
	function id (type-fieldsopt) = expr
	function id (type-fieldsopt) : type-id = expr
id->
	[a-zA-Z]([a-zA-Z][0-9]"_")* 

