/////// ------------------------------  En-tete du programme  ------------------------------ ///////

//*** On difinit les adresses utiles ***//
RESETA 	equ 0xEFFA 	// adresse de lancement du programme
LOADA  	equ 0xEFFA      // adresse de chargement du programme
STACKA equ 4096 //Adresse de base de la pile

//*** On difinit les registres usuels ***//
SP equ R15 //Reigstre de sommet de pile
WR equ R14 //Registre pour lever les traps
BP equ R13 //Registre de base de l'environnement courant
STAT equ R12 //Registre pour le passage du chainage statique

ASCII_MINUS equ 45
ASCII_PLUS  equ 43
ASCII_SP    equ 32 
ASCII_0     equ 48 
ASCII_A     equ 65 

//*** On difinit les trappes usuelles ***//
EXIT_TRP equ 64 //Trappe pour quitter le programme
READ_TRP equ 65 //Trappe de lecture sur l'entrie standard
WRITE_TRP equ 66 //Trappe d'icriture sur la sortie standard

NIL equ 0 //Base initiale
NUL equ 0 //Caracthre de fin de chaine

ORG   LOADA	// chargement en LOADA
START main	// demarre ` main

/////// ------------------------------  Programme principal  ------------------------------ ///////

main LDW SP, #STACKA //On charge la base de la pile
LDW BP, #STACKA //Base initiale nulle

//*** Saut de ligne ***//
SAUT_DE_LIGNE string ""
LDQ SAUT_DE_LIGNE, R2
LDQ 10, R3 //Saut de ligne
LDQ NUL, R4 //Fin de chaine
STB R3, (R2)+
STB R4, (R2)

//On ouvre un nouvel environnement dans la pile
STW STAT, -(SP) //On empile le chainage statique
STW BP, -(SP) //On sauvegarde l'ancienne base sur le sommet de la pile
LDW BP, SP //Le sommet de la pile devient la nouvelle base

STRING0 string "ceci est une chaine "
LDQ 0, R3
LDW R3, #STRING0
STW R3, -(R15) //On empile la valeur diclarie
STRING1 string "42"
LDQ 0, R3
LDW R3, #STRING1
STW R3, -(R15) //On empile la valeur diclarie
STRING2 string "ceci en est une autre "
LDQ 0, R3
LDW R3, #STRING2
STW R3, -(R15) //On empile la valeur diclarie
LDW R3, #5
STW R3, -(R15) //On empile la valeur diclarie
strs RSB 20
LDW R7, #strs
STW R7, -(R15)
LDW R7, #10
LDW R8, #0
LDW R5, #strs
STRING3 string "chapeau ! "
LDQ 0, R3
LDW R3, #STRING3
LDW R6, R3
LOOPTAB0 STW R6, (R5)
ADQ 2, R5
ADQ 1, R8
CMP R7, R8
BEQ ENDTAB0-$-2
BMP LOOPTAB0-$-2
ENDTAB0
row RSB 56
LDW R7, #row
STW R7, -(R15)
LDW R7, #28
LDW R8, #0
LDW R5, #row
LDW R3, #10
LDW R6, R3
LOOPTAB1 STW R6, (R5)
ADQ 2, R5
ADQ 1, R8
CMP R7, R8
BEQ ENDTAB1-$-2
BMP LOOPTAB1-$-2
ENDTAB1
col RSB 20
LDW R7, #col
STW R7, -(R15)
LDW R7, #10
LDW R8, #0
LDW R5, #col
LDW R3, #5
LDW R6, R3
LOOPTAB2 STW R6, (R5)
ADQ 2, R5
ADQ 1, R8
CMP R7, R8
BEQ ENDTAB2-$-2
BMP LOOPTAB2-$-2
ENDTAB2
LDW R1, #0x0ffa //On charge l'adresse de l'idf dans R1
LDW R3, (R1)
LDW R3, #54
STW R3, -(R15)
STRING4 string "eh ouais"
LDQ 0, R3
LDW R3, #STRING4
STW R3, -(R15)
LDW R3, #10
STW R3, -(R15)
//CALL : get_tab
JSR @get_tab
LDW R0, R3
JSR @println
STRING6 string "pacheau."
LDQ 0, R3
LDW R3, #STRING6
LDW R5, R1
LDW R1, #0x0ff2 //On charge l'adresse de l'idf dans R1
LDW R4, R3
LDW R5, R1
LDW R1, #0x0ff4 //On charge l'adresse de l'idf dans R1
LDW R3, (R1)
LDW R1, R5
ADD R3, R3, R3
LDW R1, (R1)
ADD R1, R3, R1
LDW R3, R4
STW R3, (R1) //On stocke le resultat dans la mimoire
//Dibut de l'acchs au tableau
LDW R1, #0x0ff4 //On charge l'adresse de l'idf dans R1
LDW R3, (R1)
STW R3, -(R15) //On empile le resultat de l'operande droite
LDW R3, #1
LDW R2, (R15)+ //On depile l'operande droite
ADD R2, R3, R3
ADD R3, R3, R3
LDW R1, #0x0ff2 //On charge l'adresse de l'idf dans R1
LDW R1, (R1)
ADD R1, R3, R1
LDW R3, (R1)
//Fin de l'acchs au tableau
LDW R0, R3
JSR @println
//Dibut de l'acchs au tableau
LDW R1, #0x0ff4 //On charge l'adresse de l'idf dans R1
LDW R3, (R1)
ADD R3, R3, R3
LDW R1, #0x0ff2 //On charge l'adresse de l'idf dans R1
LDW R1, (R1)
ADD R1, R3, R1
LDW R3, (R1)
//Fin de l'acchs au tableau
LDW R0, R3
JSR @println
//Dibut de l'acchs au tableau
LDW R3, #9
ADD R3, R3, R3
LDW R1, #0x0fee //On charge l'adresse de l'idf dans R1
LDW R1, (R1)
ADD R1, R3, R1
LDW R3, (R1)
//Fin de l'acchs au tableau
LDW R5, R3
LDQ 10, R6
JSR @itoa
LDW R0, R3
JSR @printiln
LDW R1, #0x0ff0 //On charge l'adresse de l'idf dans R1
LDW R3, (R1)
LDW R5, R1
LDW R1, #0x0fee //On charge l'adresse de l'idf dans R1
STW R3, (R1) //On stocke le resultat dans la mimoire
//Dibut de l'acchs au tableau
LDW R3, #15
ADD R3, R3, R3
LDW R1, #0x0fee //On charge l'adresse de l'idf dans R1
LDW R1, (R1)
ADD R1, R3, R1
LDW R3, (R1)
//Fin de l'acchs au tableau
LDW R5, R3
LDQ 10, R6
JSR @itoa
LDW R0, R3
JSR @printiln
//Dibut de l'acchs au tableau
LDW R1, #0x0ff4 //On charge l'adresse de l'idf dans R1
LDW R3, (R1)
ADD R3, R3, R3
LDW R1, #0x0ff0 //On charge l'adresse de l'idf dans R1
LDW R1, (R1)
ADD R1, R3, R1
LDW R3, (R1)
//Fin de l'acchs au tableau
LDW R5, R1
LDW R1, #0x0fec //On charge l'adresse de l'idf dans R1
//Calcul de l'adresse du champ
ADQ -4, R1
STW R3, (R1) //On stocke le resultat dans la mimoire
//Calcul de l'adresse de la variable structure
LDW R1, #0x0fec //On charge l'adresse de l'idf dans R1
//Calcul de l'adresse du champ
ADQ -4, R1
//On fout le tout dans R3
LDW R3, (R1)
LDW R5, R3
LDQ 10, R6
JSR @itoa
LDW R0, R3
JSR @printiln
//Calcul de l'adresse de la variable structure
LDW R1, #0x0fec //On charge l'adresse de l'idf dans R1
//Calcul de l'adresse du champ
ADQ -2, R1
//On fout le tout dans R3
LDW R3, (R1)
LDW R0, R3
JSR @println
STRING7 string "ah bon ?"
LDQ 0, R3
LDW R3, #STRING7
LDW R5, R1
LDW R1, #0x0fec //On charge l'adresse de l'idf dans R1
//Calcul de l'adresse du champ
ADQ -2, R1
STW R3, (R1) //On stocke le resultat dans la mimoire
//Calcul de l'adresse de la variable structure
LDW R1, #0x0fec //On charge l'adresse de l'idf dans R1
//Calcul de l'adresse du champ
ADQ -2, R1
//On fout le tout dans R3
LDW R3, (R1)
LDW R0, R3
JSR @println
LDW R3, #92
LDW R5, R1
LDW R1, #0x0ff0 //On charge l'adresse de l'idf dans R1
LDW R4, R3
LDW R5, R1
LDW R1, #0x0ff4 //On charge l'adresse de l'idf dans R1
LDW R3, (R1)
LDW R1, R5
ADD R3, R3, R3
LDW R1, (R1)
ADD R1, R3, R1
LDW R3, R4
STW R3, (R1) //On stocke le resultat dans la mimoire
//Dibut de l'acchs au tableau
LDW R1, #0x0ff4 //On charge l'adresse de l'idf dans R1
LDW R3, (R1)
STW R3, -(R15) //On empile le resultat de l'operande droite
LDW R3, #1
LDW R2, (R15)+ //On depile l'operande droite
ADD R2, R3, R3
ADD R3, R3, R3
LDW R1, #0x0ff0 //On charge l'adresse de l'idf dans R1
LDW R1, (R1)
ADD R1, R3, R1
LDW R3, (R1)
//Fin de l'acchs au tableau
LDW R5, R3
LDQ 10, R6
JSR @itoa
LDW R0, R3
JSR @printiln
//Dibut de l'acchs au tableau
LDW R1, #0x0ff4 //On charge l'adresse de l'idf dans R1
LDW R3, (R1)
ADD R3, R3, R3
LDW R1, #0x0ff0 //On charge l'adresse de l'idf dans R1
LDW R1, (R1)
ADD R1, R3, R1
LDW R3, (R1)
//Fin de l'acchs au tableau
LDW R5, R3
LDQ 10, R6
JSR @itoa
LDW R0, R3
JSR @printiln
STRING8 string "SALUT "
LDQ 0, R3
LDW R3, #STRING8
LDW R0, R3
JSR @println
STRING9 string "a "
LDQ 0, R3
LDW R3, #STRING9
LDW R0, R3
JSR @println
LDW R3, #7689
STW R3, -(R15) //On empile le resultat de l'operande droite
LDW R3, #9999
LDW R2, (R15)+ //On depile l'operande droite
SUB R2, R3, R3
LDW R5, R3
LDQ 10, R6
JSR @itoa
LDW R0, R3
JSR @printiln
LDW R3, #0
STW R3, -(R15) //On empile valeur initiale du compteur de boucle
boucle0 //Etiquette de la boucle
LDW R1, #0x0ff6 //On charge l'adresse de l'idf dans R1
LDW R3, (R1)
LDW R0, R3
JSR @println
LDW R3, #10
LDW R1, #0x0fe6 //On charge l'adresse de l'idf dans R1
LDW R2, (R1) //On charge le compteur dans R2
SUB R3, R2, R3
BEQ sortie_boucle0-$-2
ADQ 1, R2 //on incrimente le compteur
STW R2, (R1) //On met a jour le compteur en memoire
BMP boucle0-$-2
sortie_boucle0
LDW R3, (R15)+ //on dipile le compteur
STRING10 string "Entrez une chaine : "
LDQ 0, R3
LDW R3, #STRING10
LDW R0, R3
JSR @print
JSR @read
LDW R0, R3
JSR @println
LDW R3, #100
STW R3, -(R15) //On empile le resultat de l'operande droite
LDW R3, #10
LDW R2, (R15)+ //On depile l'operande droite
DIV R2, R3, R3
LDW R5, R3
LDW R3, #16
LDW R6, R3
JSR @itoa
LDW R5, R1
LDW R1, #0x0ffa //On charge l'adresse de l'idf dans R1
STW R3, (R1) //On stocke le resultat dans la mimoire
LDW R1, #0x0ffa //On charge l'adresse de l'idf dans R1
LDW R3, (R1)
LDW R0, R3
JSR @println
STRING11 string "Entrez une nouvelle chaine :  "
LDQ 0, R3
LDW R3, #STRING11
LDW R0, R3
JSR @print
JSR @read
LDW R5, R1
LDW R1, #0x0ff6 //On charge l'adresse de l'idf dans R1
STW R3, (R1) //On stocke le resultat dans la mimoire
STRING12 string "a "
LDQ 0, R3
LDW R3, #STRING12
LDW R5, R3
STRING13 string "a "
LDQ 0, R3
LDW R3, #STRING13
LDW R6, R3
LDB R2, (R5)
LDB R3, (R6)
CONDID0 CMP R2, R3
BEQ CONDSUC0-$-2
CONDFAIL0 LDQ 0, R3
BMP CONDF0-$-2
CONDSUC0 ADQ 1, R5
ADQ 1, R6
LDB R2, (R5)
LDB R3, (R6)
TST R2
BNE CONDID0-$-2
TST R3
BNE CONDFAIL0-$-2
LDQ 1, R3
CONDF0 STW R3, -(R15)

LDW R3, (R15)+

LDW R5, R1
LDW R1, #0x0ff4 //On charge l'adresse de l'idf dans R1
STW R3, (R1) //On stocke le resultat dans la mimoire
//CALL : double_print
LDW R1, #0x0ff6 //On charge l'adresse de l'idf dans R1
LDW R3, (R1)
STW R3, -(R15) //On empile le paramhtre
//Dibut de l'acchs au tableau
LDW R1, #0x0ff4 //On charge l'adresse de l'idf dans R1
LDW R3, (R1)
ADD R3, R3, R3
LDW R1, #0x0ff0 //On charge l'adresse de l'idf dans R1
LDW R1, (R1)
ADD R1, R3, R1
LDW R3, (R1)
//Fin de l'acchs au tableau
STW R3, -(R15) //On empile le paramhtre
JSR @double_print
ADQ 2, R15 //On dipile le paramhtre
ADQ 2, R15 //On dipile le paramhtre
//CALL : get_string
JSR @get_string
LDW R0, R3
JSR @println
LDW R1, #0x0ff8 //On charge l'adresse de l'idf dans R1
LDW R3, (R1)
LDW R5, R3
JSR @atoi
LDW R5, R3
LDQ 10, R6
JSR @itoa
LDW R0, R3
JSR @printiln
//CALL : get_int
JSR @get_int
LDW R5, R1
LDW R1, #0x0ff4 //On charge l'adresse de l'idf dans R1
STW R3, (R1) //On stocke le resultat dans la mimoire
LDW R1, #0x0ff4 //On charge l'adresse de l'idf dans R1
LDW R3, (R1)
LDW R5, R3
LDQ 10, R6
JSR @itoa
LDW R0, R3
JSR @printiln
STRING14 string "Entrez un entier :  "
LDQ 0, R3
LDW R3, #STRING14
LDW R0, R3
JSR @print
JSR @readi
LDW R5, R3
LDQ 10, R6
JSR @itoa
LDW R0, R3
JSR @printiln
JSR @let1
LDW R5, R1
LDW R1, #0x0ff4 //On charge l'adresse de l'idf dans R1
STW R3, (R1) //On stocke le resultat dans la mimoire
LDW R1, #0x0ff4 //On charge l'adresse de l'idf dans R1
LDW R3, (R1)
LDW R5, R3
LDQ 10, R6
JSR @itoa
LDW R0, R3
JSR @printiln
JSR @let2
LDW R5, R1
LDW R1, #0x0ff0 //On charge l'adresse de l'idf dans R1
LDW R4, R3
LDW R5, R1
LDW R3, #0
LDW R1, R5
ADD R3, R3, R3
LDW R1, (R1)
ADD R1, R3, R1
LDW R3, R4
STW R3, (R1) //On stocke le resultat dans la mimoire
//Dibut de l'acchs au tableau
LDW R3, #0
ADD R3, R3, R3
LDW R1, #0x0ff0 //On charge l'adresse de l'idf dans R1
LDW R1, (R1)
ADD R1, R3, R1
LDW R3, (R1)
//Fin de l'acchs au tableau
LDW R5, R3
LDQ 10, R6
JSR @itoa
LDW R0, R3
JSR @printiln
LDW R1, #0x0ff4 //On charge l'adresse de l'idf dans R1
LDW R3, (R1)
LDW R5, R3
LDQ 10, R6
JSR @itoa
LDW R0, R3
JSR @printiln
STRING19 string "ceci est une chaine beaucoup plus longue que la chaine initiale, n'est-ce pas ? "
LDQ 0, R3
LDW R3, #STRING19
LDW R5, R1
LDW R1, #0x0ffa //On charge l'adresse de l'idf dans R1
STW R3, (R1) //On stocke le resultat dans la mimoire
LDW R1, #0x0ffa //On charge l'adresse de l'idf dans R1
LDW R3, (R1)
LDW R0, R3
JSR @print
//On ferme l'environnement courant
LDW SP, BP //On riintialise le sommet de la pile ` la base courante
LDW BP, (SP)+ //On dipile l'ancienne base
LDW STAT, (SP)+//On dipile le chainage statique

//*** On exit le programme principal ***//
TRP #EXIT_TRP //On quitte l'exicution

/////// ------------------------------  Lets imbriquis  ------------------------------ ///////


//DEBUT LET
let1
//On ouvre un nouvel environnement dans la pile
STW STAT, -(SP) //On empile le chainage statique
STW BP, -(SP) //On sauvegarde l'ancienne base sur le sommet de la pile
LDW BP, SP //Le sommet de la pile devient la nouvelle base

LDW R3, #1
STW R3, -(R15) //On empile le resultat de l'operande droite
LDW R3, #2
LDW R2, (R15)+ //On depile l'operande droite
ADD R2, R3, R3
STW R3, -(R15)
STRING15 string "78"
LDQ 0, R3
LDW R3, #STRING15
STW R3, -(R15)
LDW R3, #5
STW R3, -(R15)
LDW R3, #0
STW R3, -(R15)
STRING16 string "0 "
LDQ 0, R3
LDW R3, #STRING16
STW R3, -(R15)
LDW R3, #0
STW R3, -(R15)
//CALL : retour_struct
JSR @retour_struct
LDW R5, R1
LDW R1, #0x0fda //On charge l'adresse de l'idf dans R1
//Copie de i
LDW R4, (R5) //On charge la valeur ` copier
STW R4, (R1)
LDW R9, R4
ADQ -2, R5
ADQ -2, R1
//Copie de s
LDW R4, (R5) //On charge la valeur ` copier
STW R4, (R1)
LDW R9, R4
ADQ -4, R5
ADQ -4, R1
//Copie de j
LDW R4, (R5) //On charge la valeur ` copier
STW R4, (R1)
LDW R9, R4
ADQ -6, R5
ADQ -6, R1
//On ferme l'environnement courant
LDW SP, BP //On riintialise le sommet de la pile ` la base courante
LDW BP, (SP)+ //On dipile l'ancienne base
LDW STAT, (SP)+//On dipile le chainage statique

RTS
//FIN LET

//DEBUT LET
let2
//On ouvre un nouvel environnement dans la pile
STW STAT, -(SP) //On empile le chainage statique
STW BP, -(SP) //On sauvegarde l'ancienne base sur le sommet de la pile
LDW BP, SP //Le sommet de la pile devient la nouvelle base

STRING17 string "46"
LDQ 0, R3
LDW R3, #STRING17
STW R3, -(R15) //On empile la valeur diclarie
STRING18 string "64"
LDQ 0, R3
LDW R3, #STRING18
LDW R5, R1
LDW R1, #0x0fe0 //On charge l'adresse de l'idf dans R1
STW R3, (R1) //On stocke le resultat dans la mimoire
LDW R3, #3
STW R3, -(R15) //On empile le resultat de l'operande droite
LDW R3, #666
LDW R2, (R15)+ //On depile l'operande droite
ADD R2, R3, R3
LDW R5, R1
LDW R1, #0x0ff4 //On charge l'adresse de l'idf dans R1
STW R3, (R1) //On stocke le resultat dans la mimoire
LDW R1, #0x0fe0 //On charge l'adresse de l'idf dans R1
LDW R3, (R1)
LDW R5, R3
JSR @atoi
//On ferme l'environnement courant
LDW SP, BP //On riintialise le sommet de la pile ` la base courante
LDW BP, (SP)+ //On dipile l'ancienne base
LDW STAT, (SP)+//On dipile le chainage statique

RTS
//FIN LET

/////// ------------------------------  Fonctions utilisateurs  ------------------------------ ///////

double_print
//On sauvegarde les registres
STW R0, -(SP)
STW R1, -(SP)
STW R2, -(SP)
STW R4, -(SP)
STW R5, -(SP)
STW R6, -(SP)
STW R7, -(SP)
STW R8, -(SP)
STW R9, -(SP)
STW R10, -(SP)
STW R11, -(SP)
STW R12, -(SP)
STW R14, -(SP)

//On ouvre un nouvel environnement dans la pile
STW STAT, -(SP) //On empile le chainage statique
STW BP, -(SP) //On sauvegarde l'ancienne base sur le sommet de la pile
LDW BP, SP //Le sommet de la pile devient la nouvelle base

LDW R1, #0x0fe6 //On charge l'adresse de l'idf dans R1
LDW R3, (R1)
LDW R0, R3
JSR @println
LDW R1, #0x0fe4 //On charge l'adresse de l'idf dans R1
LDW R3, (R1)
LDW R5, R3
LDQ 10, R6
JSR @itoa
LDW R0, R3
JSR @printiln
//On ferme l'environnement courant
LDW SP, BP //On riintialise le sommet de la pile ` la base courante
LDW BP, (SP)+ //On dipile l'ancienne base
LDW STAT, (SP)+//On dipile le chainage statique

//On recharge les registres
LDW R14, (SP)+
LDW R12, (SP)+
LDW R11, (SP)+
LDW R10, (SP)+
LDW R9, (SP)+
LDW R8, (SP)+
LDW R7, (SP)+
LDW R6, (SP)+
LDW R5, (SP)+
LDW R4, (SP)+
LDW R2, (SP)+
LDW R1, (SP)+
LDW R0, (SP)+

RTS
get_int
//On sauvegarde les registres
STW R0, -(SP)
STW R1, -(SP)
STW R2, -(SP)
STW R4, -(SP)
STW R5, -(SP)
STW R6, -(SP)
STW R7, -(SP)
STW R8, -(SP)
STW R9, -(SP)
STW R10, -(SP)
STW R11, -(SP)
STW R12, -(SP)
STW R14, -(SP)

//On ouvre un nouvel environnement dans la pile
STW STAT, -(SP) //On empile le chainage statique
STW BP, -(SP) //On sauvegarde l'ancienne base sur le sommet de la pile
LDW BP, SP //Le sommet de la pile devient la nouvelle base

LDW R3, #3
STW R3, -(R15) //On empile le resultat de l'operande droite
LDW R3, #2
LDW R2, (R15)+ //On depile l'operande droite
MUL R2, R3, R3
STW R3, -(R15) //On empile le resultat de l'operande droite
LDW R3, #7
STW R3, -(R15) //On empile le resultat de l'operande droite
LDW R3, #2
STW R3, -(R15) //On empile le resultat de l'operande droite
LDW R3, #4
LDW R2, (R15)+ //On depile l'operande droite
SUB R2, R3, R3
LDW R2, (R15)+ //On depile l'operande droite
DIV R2, R3, R3
LDW R2, (R15)+ //On depile l'operande droite
ADD R2, R3, R3
LDW R5, R1
LDW R1, #0x0ff4 //On charge l'adresse de l'idf dans R1
STW R3, (R1) //On stocke le resultat dans la mimoire
//On ferme l'environnement courant
LDW SP, BP //On riintialise le sommet de la pile ` la base courante
LDW BP, (SP)+ //On dipile l'ancienne base
LDW STAT, (SP)+//On dipile le chainage statique

//On recharge les registres
LDW R14, (SP)+
LDW R12, (SP)+
LDW R11, (SP)+
LDW R10, (SP)+
LDW R9, (SP)+
LDW R8, (SP)+
LDW R7, (SP)+
LDW R6, (SP)+
LDW R5, (SP)+
LDW R4, (SP)+
LDW R2, (SP)+
LDW R1, (SP)+
LDW R0, (SP)+

RTS
get_string
//On sauvegarde les registres
STW R0, -(SP)
STW R1, -(SP)
STW R2, -(SP)
STW R4, -(SP)
STW R5, -(SP)
STW R6, -(SP)
STW R7, -(SP)
STW R8, -(SP)
STW R9, -(SP)
STW R10, -(SP)
STW R11, -(SP)
STW R12, -(SP)
STW R14, -(SP)

//On ouvre un nouvel environnement dans la pile
STW STAT, -(SP) //On empile le chainage statique
STW BP, -(SP) //On sauvegarde l'ancienne base sur le sommet de la pile
LDW BP, SP //Le sommet de la pile devient la nouvelle base

STRING5 string "I like kebabs."
LDQ 0, R3
LDW R3, #STRING5
//On ferme l'environnement courant
LDW SP, BP //On riintialise le sommet de la pile ` la base courante
LDW BP, (SP)+ //On dipile l'ancienne base
LDW STAT, (SP)+//On dipile le chainage statique

//On recharge les registres
LDW R14, (SP)+
LDW R12, (SP)+
LDW R11, (SP)+
LDW R10, (SP)+
LDW R9, (SP)+
LDW R8, (SP)+
LDW R7, (SP)+
LDW R6, (SP)+
LDW R5, (SP)+
LDW R4, (SP)+
LDW R2, (SP)+
LDW R1, (SP)+
LDW R0, (SP)+

RTS
get_tab
//On sauvegarde les registres
STW R0, -(SP)
STW R1, -(SP)
STW R2, -(SP)
STW R4, -(SP)
STW R5, -(SP)
STW R6, -(SP)
STW R7, -(SP)
STW R8, -(SP)
STW R9, -(SP)
STW R10, -(SP)
STW R11, -(SP)
STW R12, -(SP)
STW R14, -(SP)

//On ouvre un nouvel environnement dans la pile
STW STAT, -(SP) //On empile le chainage statique
STW BP, -(SP) //On sauvegarde l'ancienne base sur le sommet de la pile
LDW BP, SP //Le sommet de la pile devient la nouvelle base

//On ferme l'environnement courant
LDW SP, BP //On riintialise le sommet de la pile ` la base courante
LDW BP, (SP)+ //On dipile l'ancienne base
LDW STAT, (SP)+//On dipile le chainage statique

//On recharge les registres
LDW R14, (SP)+
LDW R12, (SP)+
LDW R11, (SP)+
LDW R10, (SP)+
LDW R9, (SP)+
LDW R8, (SP)+
LDW R7, (SP)+
LDW R6, (SP)+
LDW R5, (SP)+
LDW R4, (SP)+
LDW R2, (SP)+
LDW R1, (SP)+
LDW R0, (SP)+

RTS
retour_struct
//On sauvegarde les registres
STW R0, -(SP)
STW R1, -(SP)
STW R2, -(SP)
STW R4, -(SP)
STW R5, -(SP)
STW R6, -(SP)
STW R7, -(SP)
STW R8, -(SP)
STW R9, -(SP)
STW R10, -(SP)
STW R11, -(SP)
STW R12, -(SP)
STW R14, -(SP)

//On ouvre un nouvel environnement dans la pile
STW STAT, -(SP) //On empile le chainage statique
STW BP, -(SP) //On sauvegarde l'ancienne base sur le sommet de la pile
LDW BP, SP //Le sommet de la pile devient la nouvelle base

//On ferme l'environnement courant
LDW SP, BP //On riintialise le sommet de la pile ` la base courante
LDW BP, (SP)+ //On dipile l'ancienne base
LDW STAT, (SP)+//On dipile le chainage statique

//On recharge les registres
LDW R14, (SP)+
LDW R12, (SP)+
LDW R11, (SP)+
LDW R10, (SP)+
LDW R9, (SP)+
LDW R8, (SP)+
LDW R7, (SP)+
LDW R6, (SP)+
LDW R5, (SP)+
LDW R4, (SP)+
LDW R2, (SP)+
LDW R1, (SP)+
LDW R0, (SP)+

RTS
/////// ------------------------------  Fonctions du langage  ------------------------------ ///////

//*** println(string) : affiche le texte passi en paramhtre et fait un saut de ligne ***//
println 
//On sauvegarde les registres
STW R0, -(SP)
STW R1, -(SP)
STW R2, -(SP)
STW R4, -(SP)
STW R5, -(SP)
STW R6, -(SP)
STW R7, -(SP)
STW R8, -(SP)
STW R9, -(SP)
STW R10, -(SP)
STW R11, -(SP)
STW R12, -(SP)
STW R14, -(SP)
//On ouvre un nouvel environnement dans la pile
STW STAT, -(SP) //On empile le chainage statique
STW BP, -(SP) //On sauvegarde l'ancienne base sur le sommet de la pile
LDW BP, SP //Le sommet de la pile devient la nouvelle base
TRP #WRITE_TRP //On lhve la trappe
LDQ SAUT_DE_LIGNE, R0
TRP #WRITE_TRP
//On ferme l'environnement courant
LDW SP, BP //On riintialise le sommet de la pile ` la base courante
LDW BP, (SP)+ //On dipile l'ancienne base
LDW STAT, (SP)+//On dipile le chainage statique
//On recharge les registres
LDW R14, (SP)+
LDW R12, (SP)+
LDW R11, (SP)+
LDW R10, (SP)+
LDW R9, (SP)+
LDW R8, (SP)+
LDW R7, (SP)+
LDW R6, (SP)+
LDW R5, (SP)+
LDW R4, (SP)+
LDW R2, (SP)+
LDW R1, (SP)+
LDW R0, (SP)+
RTS //On retourne dans la suite de l'exicution

//*** print(string) : affiche le texte passi en paramhtre ***//
print 
//On sauvegarde les registres
STW R0, -(SP)
STW R1, -(SP)
STW R2, -(SP)
STW R4, -(SP)
STW R5, -(SP)
STW R6, -(SP)
STW R7, -(SP)
STW R8, -(SP)
STW R9, -(SP)
STW R10, -(SP)
STW R11, -(SP)
STW R12, -(SP)
STW R14, -(SP)
//On ouvre un nouvel environnement dans la pile
STW STAT, -(SP) //On empile le chainage statique
STW BP, -(SP) //On sauvegarde l'ancienne base sur le sommet de la pile
LDW BP, SP //Le sommet de la pile devient la nouvelle base
TRP #WRITE_TRP //On lhve la trappe
//On ferme l'environnement courant
LDW SP, BP //On riintialise le sommet de la pile ` la base courante
LDW BP, (SP)+ //On dipile l'ancienne base
LDW STAT, (SP)+//On dipile le chainage statique
//On recharge les registres
LDW R14, (SP)+
LDW R12, (SP)+
LDW R11, (SP)+
LDW R10, (SP)+
LDW R9, (SP)+
LDW R8, (SP)+
LDW R7, (SP)+
LDW R6, (SP)+
LDW R5, (SP)+
LDW R4, (SP)+
LDW R2, (SP)+
LDW R1, (SP)+
LDW R0, (SP)+
RTS //On retourne dans la suite de l'exicution

//*** printiln(int) : affiche l'entier passi en paramhtre ***//
printiln 
//On sauvegarde les registres
STW R0, -(SP)
STW R1, -(SP)
STW R2, -(SP)
STW R4, -(SP)
STW R5, -(SP)
STW R6, -(SP)
STW R7, -(SP)
STW R8, -(SP)
STW R9, -(SP)
STW R10, -(SP)
STW R11, -(SP)
STW R12, -(SP)
STW R14, -(SP)
//On ouvre un nouvel environnement dans la pile
STW STAT, -(SP) //On empile le chainage statique
STW BP, -(SP) //On sauvegarde l'ancienne base sur le sommet de la pile
LDW BP, SP //Le sommet de la pile devient la nouvelle base
TRP #WRITE_TRP //On lhve la trappe
LDQ SAUT_DE_LIGNE, R0
TRP #WRITE_TRP
//On ferme l'environnement courant
LDW SP, BP //On riintialise le sommet de la pile ` la base courante
LDW BP, (SP)+ //On dipile l'ancienne base
LDW STAT, (SP)+//On dipile le chainage statique
//On recharge les registres
LDW R14, (SP)+
LDW R12, (SP)+
LDW R11, (SP)+
LDW R10, (SP)+
LDW R9, (SP)+
LDW R8, (SP)+
LDW R7, (SP)+
LDW R6, (SP)+
LDW R5, (SP)+
LDW R4, (SP)+
LDW R2, (SP)+
LDW R1, (SP)+
LDW R0, (SP)+
RTS //On retourne dans la suite de l'exicution

//*** printi(int) : affiche l'entier passi en paramhtre ***//
printi 
//On sauvegarde les registres
STW R0, -(SP)
STW R1, -(SP)
STW R2, -(SP)
STW R4, -(SP)
STW R5, -(SP)
STW R6, -(SP)
STW R7, -(SP)
STW R8, -(SP)
STW R9, -(SP)
STW R10, -(SP)
STW R11, -(SP)
STW R12, -(SP)
STW R14, -(SP)
//On ouvre un nouvel environnement dans la pile
STW STAT, -(SP) //On empile le chainage statique
STW BP, -(SP) //On sauvegarde l'ancienne base sur le sommet de la pile
LDW BP, SP //Le sommet de la pile devient la nouvelle base
TRP #WRITE_TRP //On lhve la trappe
//On ferme l'environnement courant
LDW SP, BP //On riintialise le sommet de la pile ` la base courante
LDW BP, (SP)+ //On dipile l'ancienne base
LDW STAT, (SP)+//On dipile le chainage statique
//On recharge les registres
LDW R14, (SP)+
LDW R12, (SP)+
LDW R11, (SP)+
LDW R10, (SP)+
LDW R9, (SP)+
LDW R8, (SP)+
LDW R7, (SP)+
LDW R6, (SP)+
LDW R5, (SP)+
LDW R4, (SP)+
LDW R2, (SP)+
LDW R1, (SP)+
LDW R0, (SP)+
RTS //On retourne dans la suite de l'exicution

//*** string read() : lit une chaine sur l'entrie standard ***//
read 
//On sauvegarde les registres
STW R0, -(SP)
STW R1, -(SP)
STW R2, -(SP)
STW R4, -(SP)
STW R5, -(SP)
STW R6, -(SP)
STW R7, -(SP)
STW R8, -(SP)
STW R9, -(SP)
STW R10, -(SP)
STW R11, -(SP)
STW R12, -(SP)
STW R14, -(SP)
//On ouvre un nouvel environnement dans la pile
STW STAT, -(SP) //On empile le chainage statique
STW BP, -(SP) //On sauvegarde l'ancienne base sur le sommet de la pile
LDW BP, SP //Le sommet de la pile devient la nouvelle base
STRING20 RSB 50 //On crie la chaine de retour (100 caracthres max)
LDQ STRING20, R0 //On met cette adresse en lecture
TRP #READ_TRP //On lhve la trappe
LDW R3, R0 //On met le risultat dans R3
//On ferme l'environnement courant
LDW SP, BP //On riintialise le sommet de la pile ` la base courante
LDW BP, (SP)+ //On dipile l'ancienne base
LDW STAT, (SP)+//On dipile le chainage statique
//On recharge les registres
LDW R14, (SP)+
LDW R12, (SP)+
LDW R11, (SP)+
LDW R10, (SP)+
LDW R9, (SP)+
LDW R8, (SP)+
LDW R7, (SP)+
LDW R6, (SP)+
LDW R5, (SP)+
LDW R4, (SP)+
LDW R2, (SP)+
LDW R1, (SP)+
LDW R0, (SP)+
RTS //On retourne dans le programme

//*** int readi() : lit un entier sur l'entrie standard ***//
readi 
//On sauvegarde les registres
STW R0, -(SP)
STW R1, -(SP)
STW R2, -(SP)
STW R4, -(SP)
STW R5, -(SP)
STW R6, -(SP)
STW R7, -(SP)
STW R8, -(SP)
STW R9, -(SP)
STW R10, -(SP)
STW R11, -(SP)
STW R12, -(SP)
STW R14, -(SP)
//On ouvre un nouvel environnement dans la pile
STW STAT, -(SP) //On empile le chainage statique
STW BP, -(SP) //On sauvegarde l'ancienne base sur le sommet de la pile
LDW BP, SP //Le sommet de la pile devient la nouvelle base
//On commence par lire la chaine
STRING21 RSB 100 //On crie la chaine de retour (100 caracthres max)
LDQ STRING21, R0 //On met cette adresse en lecture
TRP #READ_TRP //On lhve la trappe
LDW R5, R0 //On met le risultat dans R5
JSR @atoi //On convertit en entier. Risultat dans R3
//On ferme l'environnement courant
LDW SP, BP //On riintialise le sommet de la pile ` la base courante
LDW BP, (SP)+ //On dipile l'ancienne base
LDW STAT, (SP)+//On dipile le chainage statique
//On recharge les registres
LDW R14, (SP)+
LDW R12, (SP)+
LDW R11, (SP)+
LDW R10, (SP)+
LDW R9, (SP)+
LDW R8, (SP)+
LDW R7, (SP)+
LDW R6, (SP)+
LDW R5, (SP)+
LDW R4, (SP)+
LDW R2, (SP)+
LDW R1, (SP)+
LDW R0, (SP)+
RTS //On retourne dans le programme

//*** int atoi(string) : convertit une chaine en entier base 10. R5 = adresse de la chaine. ***//
atoi 
//On sauvegarde les registres
STW R0, -(SP)
STW R1, -(SP)
STW R2, -(SP)
STW R4, -(SP)
STW R5, -(SP)
STW R6, -(SP)
STW R7, -(SP)
STW R8, -(SP)
STW R9, -(SP)
STW R10, -(SP)
STW R11, -(SP)
STW R12, -(SP)
STW R14, -(SP)
//On ouvre un nouvel environnement dans la pile
STW STAT, -(SP) //On empile le chainage statique
STW BP, -(SP) //On sauvegarde l'ancienne base sur le sommet de la pile
LDW BP, SP //Le sommet de la pile devient la nouvelle base
LDQ 0, R3 //On initialise R3
LDQ ASCII_0, R6 //On charge lavaleur ASCII de 0 
LDQ 10, R7 //On charge la valeur ASCII de 0 
LOOP_ATOI 
//On charge le caracthre courant dans R4
LDB R4, (R5)
TST R4
BEQ END_LOOP_ATOI-$-2 //Si le caracthre courant est igal ` 0, on saute ` la fin de la boucle

MUL R3, R7, R3//On multiplie par 10 la valeur de l'entier
SUB R4, R6, R4 //On calcule la valeur dicimale de R4
ADD R3, R4, R3 //On ajoute cette valeur ` R3

ADQ 1, R5//On se diplace dans la chaine
BMP LOOP_ATOI-$-2
END_LOOP_ATOI
//On ferme l'environnement courant
LDW SP, BP //On riintialise le sommet de la pile ` la base courante
LDW BP, (SP)+ //On dipile l'ancienne base
LDW STAT, (SP)+//On dipile le chainage statique
//On recharge les registres
LDW R14, (SP)+
LDW R12, (SP)+
LDW R11, (SP)+
LDW R10, (SP)+
LDW R9, (SP)+
LDW R8, (SP)+
LDW R7, (SP)+
LDW R6, (SP)+
LDW R5, (SP)+
LDW R4, (SP)+
LDW R2, (SP)+
LDW R1, (SP)+
LDW R0, (SP)+
RTS //On retourne dans le programme

//*** string itoa(int number, int base) : Cast un entier en une chaine selon la base passie en paramhtre ***//
itoa //On sauvegarde les registres
STW R0, -(SP)
STW R1, -(SP)
STW R2, -(SP)
STW R4, -(SP)
STW R5, -(SP)
STW R6, -(SP)
STW R7, -(SP)
STW R8, -(SP)
STW R9, -(SP)
STW R10, -(SP)
STW R11, -(SP)
STW R12, -(SP)
STW R14, -(SP)
//On ouvre un nouvel environnement dans la pile
STW STAT, -(SP) //On empile le chainage statique
STW BP, -(SP) //On sauvegarde l'ancienne base sur le sommet de la pile
LDW BP, SP //Le sommet de la pile devient la nouvelle base
STRING22 RSB 100 //On crie la chaine de retour (100 octets max)
LDQ STRING22, R3 //On charge l'adresse dans R0
//R5 -> entier ` convertir, R6 -> base de conversion, R3 -> adresse de la chaine risultat
LDQ 10, R8  
CMP R6, R8  
BNE NOSIGN-$-2 //Si b==10, on calcule le signe
LDQ 0, R7 //R7 contiendra le symbole de la conversion
TST R5
BGE POSIT-$-2 //On saute si (R5) >= 0
NEG R5, R5
LDQ ASCII_MINUS, R7
POSIT NOP

NOSIGN  LDW R8, R5 //R8 <- entier ` convertir
CNVLOOP ldw R5, R8

SRL R6, R6
//On divise la base par 2
ANI R5, R9, #1 //ANd Immidiate entre r0 et 00...01 vers r4
SRL R5, R5 //on divise l'entier par 2
DIV R5, R6, R8
SHL R5, R5
ADD R5, R9, R5
SHL R6, R6

ADQ -10, R5 //entier -10 -> R5
BGE LETTER-$-2
ADQ 10+ASCII_0, R5

BMP STKCHR-$-2

LETTER ADQ ASCII_A, R5

STKCHR STW R5, -(SP)
TST R8
BNE CNVLOOP-$-2
 //Boucle si quotient non nul

//On empile maintenant les caracthres dans le bon ordre
LDW R2, R3
LDQ 0, R10
CMP R7, R10 //Si R7 = 0, on l'ajoute pas a la chaine
BEQ CPYLOOP-$-2
STB R7, (R2)+ //On copie le signe dans le tampon
CPYLOOP LDW R5, (SP)+//On dipile le chiffre
STB R5, (R2)+
CMP SP, BP
BNE CPYLOOP-$-2
LDQ NUL, R5
STB R5, (R2)+//On termine la chaine par NUL
//On ferme l'environnement courant
LDW SP, BP //On riintialise le sommet de la pile ` la base courante
LDW BP, (SP)+ //On dipile l'ancienne base
LDW STAT, (SP)+//On dipile le chainage statique
//On recharge les registres
LDW R14, (SP)+
LDW R12, (SP)+
LDW R11, (SP)+
LDW R10, (SP)+
LDW R9, (SP)+
LDW R8, (SP)+
LDW R7, (SP)+
LDW R6, (SP)+
LDW R5, (SP)+
LDW R4, (SP)+
LDW R2, (SP)+
LDW R1, (SP)+
LDW R0, (SP)+
RTS

